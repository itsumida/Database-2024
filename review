-- ChatGPT code -- 

SELECT A.id AS student_id_1, A.first_name AS student_first_name_1, A.last_name AS student_last_name_1, 
       C1.title AS student_pcourse_title_1,
       B.id AS student_id_2, B.first_name AS student_first_name_2, B.last_name AS student_last_name_2, 
       C2.title AS student_pcourse_title_2
FROM pair p1
JOIN pair p2 ON p1.student_id = p2.partner_id AND p1.partner_id = p2.student_id AND p1.student_id < p2.student_id
JOIN student A ON p1.student_id = A.id
JOIN student B ON p2.student_id = B.id
JOIN course C1 ON A.pcourse_id = C1.id
JOIN course C2 ON B.pcourse_id = C2.id;

-- Zara's code --
SELECT s1.id AS student_id, s1.first_name AS student_first_name, 
                s1.last_name AS student_last_name,
                s2.id AS partner_id
                s2.first_name AS partner_first_name, 
                s2.last_name AS partner_last_name, 
                c1.title AS student_course_title,
                c2.title AS partner_course_title

FROM pair p1
JOIN pair p2 ON p1.student_id = p2.partner_id AND p1.partner_id = p2.student_id AND p1.student_id < p2.student_id
JOIN student s1 ON p1.student_id = s1.id
JOIN student s2 ON p2.student_id = s2.id
JOIN course c1 ON s1.pcourse_id = c1.id
JOIN course c2 ON s2.pcourse_id = c2.id

- Code for validation -
@app.route("/questionnaire/page", methods=["GET", "POST"])
def questionnaire():
    cursor = get_db().cursor()
    form_data = {}  # Initialize an empty dictionary to hold form data
    if request.method == "POST":
        try:
            form = request.form
            student_id = int(form.get("student_id"))
            teacher_id = int(form.get("teacher_id")) 
            partner1_id = int(form.get("partner1_id"))
            partner2_id = int(form.get("partner2_id"))
            partner3_id = int(form.get("partner3_id"))

            # Check if the selected partners are unique
            if partner1_id == partner2_id or partner1_id == partner3_id or partner2_id == partner3_id:
                return render_template("select_unique.html", message="Please select three unique partners.")

            cursor.execute("BEGIN")

            # Check if the student has already submitted a questionnaire
            cursor.execute("""
                SELECT student_id
                FROM pair
                WHERE student_id = ?
                LIMIT 1
            """, [student_id])
            existing_pair = cursor.fetchone()
            if existing_pair:
                cursor.execute("COMMIT")
                return render_template("questionnaire_already_answered.html")
            
            # Check if the selected partners include the student
            if student_id in [partner1_id, partner2_id, partner3_id]:
                return render_template("select_not_you.html", message="Please select partners other than yourself.")
            
            cursor.execute("""
                SELECT id
                FROM student
                WHERE id = ? AND class_id = ?
                LIMIT 1
            """, [student_id, teacher_id])
            student_teacher_matching = cursor.fetchone()
            if not student_teacher_matching:
                return render_template("mismatched_teacher.html")


            cursor.execute("""
                INSERT INTO pair (student_id, partner_id, preference_rank)
                VALUES (?, ?, 1), (?, ?, 2), (?, ?, 3)
            """, (student_id, partner1_id, student_id, partner2_id, student_id, partner3_id))
            cursor.execute("COMMIT")

            form_data = {
                "student_id": request.form.get("student_id"),
                "teacher_id": request.form.get("teacher_id"),
                "course_id": request.form.get("course_id"),
                "partner1_id": request.form.get("partner1_id"),
                "partner2_id": request.form.get("partner2_id"),
                "partner3_id": request.form.get("partner3_id")
            }
            # cursor.execute("COMMIT")
            return render_template("thank_you.html")
        except (TypeError, ValueError, sqlite3.DatabaseError):
            abort(400)

    cursor.execute("SELECT * FROM student")
    students = cursor.fetchall()
    teachers = cursor.execute("SELECT * FROM teacher")
    teachers = cursor.fetchall()
    courses = cursor.execute("SELECT * FROM course")
    courses = cursor.fetchall()
    return render_template("questionnaire.html", students=students, teachers=teachers, courses=courses, form_data = form_data)

1. I have created mentioned html files. 
2. Student chooses his own teacher(done)
3. student chooses 3 unique partners(done)
4. student can't choose himself as partner(done)
5. updating pair table(done)
6. student submits for the first time(done)

What's left?

Prefilled submission 
